#!/usr/bin/env bash

# SSH Functions
function ssh_server() {
    local server_name=$1
    local server_ip=$2
    local server_user=$3
    local server_port=$4
    local server_key=$5

    # Print Usage:
    if [ -z "$server_name" ] || [ -z "$server_ip" ] || [ -z "$server_user" ]; then
        echo "Usage: add_ssh_server_to_config <server_name> <server_ip> <server_user> [server_port] [server_key]"
        return 1
    fi

    if [ -z "$server_port" ]; then
        server_port=22
    fi

    if [ -z "$server_key" ]; then
        server_key=~/.ssh/id_rsa
    fi


    echo "" >> ~/.ssh/config
    echo "Host $server_name" >> ~/.ssh/config
    echo "    HostName $server_ip" >> ~/.ssh/config
    echo "    Port $server_port" >> ~/.ssh/config
    echo "    User $server_user" >> ~/.ssh/config
    echo "    ForwardAgent yes" >> ~/.ssh/config
    echo "    IdentityFile $server_key" >> ~/.ssh/config

    sscopy $server_name
}

function codessh() {
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: vssh <user@host> '[remote_directory]'"
        return 1
    fi

    local host=$1
    local dir=${2:-}

    if [ -z "$dir" ]; then
        #Resolve directory:
        dir=$(ssh "$host" 'cd ~ && pwd')
        # Connect to the SSH server without specifying a directory
        code --remote ssh-remote+"$host" "$dir"
    else
        # Resolve directory:
        new_dir=$(ssh "$host" "cd ~ && pwd")
        new_dir="$new_dir/$dir"
        # Connect to the SSH server and open the specified directory
        code --remote ssh-remote+"$host" "$new_dir"
    fi
}

function curssh() {
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: vssh <user@host> '[remote_directory]'"
        return 1
    fi

    local host=$1
    local dir=${2:-}

    if [ -z "$dir" ]; then
        #Resolve directory:
        dir=$(ssh "$host" 'cd ~ && pwd')
        # Connect to the SSH server without specifying a directory
        cursor --remote ssh-remote+"$host" "$dir"
    else
        # Resolve directory:
        new_dir=$(ssh "$host" "cd ~ && pwd")
        new_dir="$new_dir/$dir"
        # Connect to the SSH server and open the specified directory
        cursor --remote ssh-remote+"$host" "$new_dir"
    fi
}

# File functions
function tmpclean() {
    cd $TMPDIR
    rm -rf *
}

function mkcd() {
    mkdir -p "$1" && cd "$1"
}

function extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <archive_file> [output_directory]"
        return 1
    fi

    FILE="$1"
    OUTPUT_DIR="$2"

    if [ -n "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR"
        OUTPUT_OPTION="-C \"$OUTPUT_DIR\""
    else
        OUTPUT_OPTION=""
    fi

    case "$FILE" in
        *.tar.bz2|*.tbz2) 
            eval tar xvjf "$FILE" $OUTPUT_OPTION ;;
        *.tar.gz|*.tgz) 
            eval tar xvzf "$FILE" $OUTPUT_OPTION ;;
        *.tar.xz|*.txz) 
            eval tar xvJf "$FILE" $OUTPUT_OPTION ;;
        *.tar.lz|*.tlz) 
            eval tar --lzip -xvf "$FILE" $OUTPUT_OPTION ;;
        *.tar.Z)     
            eval tar xvZf "$FILE" $OUTPUT_OPTION ;;
        *.tar)       
            eval tar xvf "$FILE" $OUTPUT_OPTION ;;
        *.zip)       
            unzip "$FILE" -d "${OUTPUT_DIR:-.}" ;;
        *.rar)       
            unrar x "$FILE" "${OUTPUT_DIR:-.}" ;;
        *.7z)        
            7z x "$FILE" "-o${OUTPUT_DIR:-.}" ;;
        *.gz)        
            if [ -n "$OUTPUT_DIR" ]; then
                mkdir -p "$OUTPUT_DIR"
                gunzip -c "$FILE" > "$OUTPUT_DIR/$(basename "${FILE%.*}")"
            else
                gunzip "$FILE"
            fi ;;
        *.bz2)       
            if [ -n "$OUTPUT_DIR" ]; then
                mkdir -p "$OUTPUT_DIR"
                bunzip2 -c "$FILE" > "$OUTPUT_DIR/$(basename "${FILE%.*}")"
            else
                bunzip2 "$FILE"
            fi ;;
        *.xz)        
            if [ -n "$OUTPUT_DIR" ]; then
                mkdir -p "$OUTPUT_DIR"
                unxz -c "$FILE" > "$OUTPUT_DIR/$(basename "${FILE%.*}")"
            else
                unxz "$FILE"
            fi ;;
        *.Z)         
            if [ -n "$OUTPUT_DIR" ]; then
                mkdir -p "$OUTPUT_DIR"
                uncompress -c "$FILE" > "$OUTPUT_DIR/$(basename "${FILE%.*}")"
            else
                uncompress "$FILE"
            fi ;;
        *)
            echo "extract: '$FILE' - unknown archive method"
            return 1 ;;
    esac
}

function compress() {
    if [ -z "$1" ]; then
        echo "Usage: compress <file_or_directory> [output_file]"
        return 1
    fi

    FILE="$1"
    OUTPUT_FILE="$2"

    if [ -n "$OUTPUT_FILE" ]; then
        OUTPUT_OPTION="-o \"$OUTPUT_FILE\""
    else
        OUTPUT_OPTION=""
    fi

    case "$FILE" in
        *.tar.bz2|*.tbz2) 
            eval tar cvjf "$OUTPUT_FILE" $OUTPUT_OPTION "$FILE" ;;
        *.tar.gz|*.tgz) 
            eval tar cvzf "$OUTPUT_FILE" $OUTPUT_OPTION "$FILE" ;;
        *.tar.xz|*.txz) 
            eval tar cvJf "$OUTPUT_FILE" $OUTPUT_OPTION "$FILE" ;;
        *.tar.lz|*.tlz) 
            eval tar --lzip -cvf "$OUTPUT_FILE" $OUTPUT_OPTION "$FILE" ;;
        *.tar.Z)     
            eval tar cvZf "$OUTPUT_FILE" $OUTPUT_OPTION "$FILE" ;;
        *.tar)       
            eval tar cvf "$OUTPUT_FILE" $OUTPUT_OPTION "$FILE" ;;
        *.zip)       
            zip -r "$OUTPUT_FILE" "$FILE" ;;
        *.rar)       
            rar a "$OUTPUT_FILE" "$FILE" ;;
        *.7z)        
            7z a "$OUTPUT_FILE" "$FILE" ;;
        *.gz)        
            gzip -c "$FILE" > "$OUTPUT_FILE" ;;
        *.bz2)       
            bzip2 -c "$FILE" > "$OUTPUT_FILE" ;;
        *.xz)        
            xz -c "$FILE" > "$OUTPUT_FILE" ;;
        *.Z)         
            compress -c "$FILE" > "$OUTPUT_FILE" ;;
        *)
            echo "compress: '$FILE' - unknown archive method"
            return 1 ;;
    esac
}
     
    
# Latex functions
function latexnote() {
    if [[ $# -eq 0 ]]; then
        echo "Please provide a directory name as an argument."
        return 1
    fi

    local dest_dir="$1"
    local template_dir="/Users/aliramlaoui/Google Drive/My Drive/Cours 3A/latex/latex_template/"

    # Check if the destination directory exists, create it if it doesn't
    if [[ ! -d "$dest_dir" ]]; then
        mkdir -p "$dest_dir"
    fi

    # Copy the latex_template folder to the destination directory
    cp -r "$template_dir" "$dest_dir"

    echo "latex_template folder copied to $dest_dir successfully."
}

function latexbeamer() {
    if [[ $# -eq 0 ]]; then
        echo "Please provide a directory name as an argument."
        return 1
    fi

    local dest_dir="$1"
    local template_dir="/Users/aliramlaoui/Google Drive/My Drive/Cours 3A/latex/latex_beamer/"

    # Check if the destination directory exists, create it if it doesn't
    if [[ ! -d "$dest_dir" ]]; then
        mkdir -p "$dest_dir"
    fi

    # Copy the latex_template folder to the destination directory
    cp -r "$template_dir" "$dest_dir"

    echo "latex_template folder copied to $dest_dir successfully."
}

function latexcs() {
    if [[ $# -eq 0 ]]; then
        echo "Please provide a directory name as an argument."
        return 1
    fi

    local dest_dir="$1"
    local template_dir="/Users/aliramlaoui/Google Drive/My Drive/Cours 3A/latex/latex_cs/"

    # Check if the destination directory exists, create it if it doesn't
    if [[ ! -d "$dest_dir" ]]; then
        mkdir -p "$dest_dir"
    fi

    # Copy the latex_template folder to the destination directory
    cp -r "$template_dir" "$dest_dir"

    echo "latex_template folder copied to $dest_dir successfully."
}

# Tmux helpers
function tsplit() {
  tmux split-window -v "$@"
}

function tvsplit() {
  tmux split-window -h "$@"
}

function tresize() {
  tmux resize-pane -D "$@"
}

function tresizeh() {
  tmux resize-pane -R "$@"
}

function tresizev() {
  tmux resize-pane -U "$@"
}

function tresizeleft() {
  tmux resize-pane -L "$@"
}

function tresizeup() {
  tmux resize-pane -U "$@"
}

function tresizedown() {
  tmux resize-pane -D "$@"
}

function tresizeup() {
  tmux resize-pane -U "$@"
}

function tresizeleft() {
  tmux resize-pane -L "$@"
}

function tresizeright() {
  tmux resize-pane -R "$@"
}

# Rsync helpers
function rsync () {
    if [ -f "$XDG_CONFIG_HOME/rsync/.rsync.exclude" ]; then
        set -- --exclude-from="$XDG_CONFIG_HOME/rsync/.rsync.exclude" "$@"
    fi

    command rsync "$@"
}

function rsyncgit () {
    if [ -f "$XDG_CONFIG_HOME/rsync/.rsync.exclude" ]; then
        set -- --exclude-from="$XDG_CONFIG_HOME/rsync/.rsync.exclude" --filter=':- .gitignore' "$@"
    fi

    command rsync "$@"
}
